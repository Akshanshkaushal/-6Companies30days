stocks
Best Time to Buy and Sell Stock
class Solution {
public:
    int maxProfit(std::vector<int>& prices) {
        int buy = prices[0];
        int profit = 0;
        for (int i = 1; i < prices.size(); i++) {
            if (prices[i] < buy) {
                buy = prices[i];
            } else if (prices[i] - buy > profit) {
                profit = prices[i] - buy;
            }
        }
        return profit;
    }
};

Best Time to Buy and Sell Stock II
class Solution {

public:
    int f(int i , int buy, vector<int>& prices, vector<vector<int>>& dp){

       int n = prices.size();
       if(i==n) return 0;

       int profit = 0;

       if(dp[i][buy] != -1) return dp[i][buy];

       if(buy){
        profit = max(-prices[i]+f(i+1,0,prices,dp), 0+f(i+1,1,prices,dp));
       }else{
        profit = max(prices[i]+f(i+1,1,prices,dp), 0+f(i+1,0,prices,dp));
       }

       return dp[i][buy] = profit;

    }

public:
    int maxProfit(vector<int>& prices) {

        int n = prices.size();

        vector<vector<int>> dp(n, vector<int> (2,-1));
 
        return f(0,1,prices,dp);
       
    }
};

Best Time to Buy and Sell Stock IV
class Solution {

public:
    int f(int i , int buy, vector<int>& prices,vector<vector<vector<int>>>& dp, int cap){

       int n = prices.size();
       if(cap==0) return 0;
       if(i==n) return 0;

       int profit = 0;

       if(dp[i][buy][cap] != -1) return dp[i][buy][cap];

       if(buy){
        profit = max(-prices[i]+f(i+1,0,prices,dp,cap), 0+f(i+1,1,prices,dp,cap));
       }else{
        profit = max(prices[i]+f(i+1,1,prices,dp,cap-1), 0+f(i+1,0,prices,dp,cap));
       }

       return dp[i][buy][cap] = profit;

    }

public:
    int maxProfit(int k, vector<int>& prices) {

        int n = prices.size();

        vector<vector<vector<int>>> dp(n,vector<vector<int>> (2,vector<int> (k+1,-1)));
 
        return f(0,1,prices,dp,k);
       
    }
};

Best Time to Buy and Sell Stock with Cooldown
class Solution {

public:
    int f(int i , int buy, vector<int>& prices, vector<vector<int>>& dp){

       int n = prices.size();
       if(i>=n) return 0;

       int profit = 0;

       if(dp[i][buy] != -1) return dp[i][buy];

       if(buy){
        profit = max(-prices[i]+f(i+1,0,prices,dp), 0+f(i+1,1,prices,dp));
       }else{
        //skip 1 day after selling cooldown period
        profit = max(prices[i]+f(i+2,1,prices,dp), 0+f(i+1,0,prices,dp));
       }

       return dp[i][buy] = profit;

    }

public:
    int maxProfit(vector<int>& prices) {

        int n = prices.size();

        vector<vector<int>> dp(n, vector<int> (2,-1));
 
        return f(0,1,prices,dp);
       
    }
};


Longest Mountain in Array
brute o(n)
class Solution {
public:
    int longestMountain(vector<int>& arr) {
        
        int n = arr.size();
        int maxi = 0;

        for(int i=0; i<n; i++){
            int cnt1 = 0, cnt2 =0;
               
            if(i<n-1){
                for(int j=i+1; j<n; j++){
                    if(arr[j]<arr[j-1]){
                        cnt1++;
                    }else{
                        break;
                    }
                }
            }

            if(i>0){
                for(int j=i-1; j>=0; j--){
                     if(arr[j+1]>arr[j]){
                        cnt2++;
                     }else{
                        break;
                     }
                }
            }
            
            if(cnt1>0 && cnt2>0){
                int cnt = cnt1+cnt2;
                cnt++;
                maxi = max(maxi, cnt);
            }

        }

        return maxi;

    }
};

lis bitonic

---
----
----












 Maximum Sum of Distinct Subarrays With Length K
brute
class Solution {
public:
    long long maximumSubarraySum(vector<int>& nums, int k) {

        int n = nums.size();
        int mxsum = 0;
        
        for(int i=0; i<n; i++){
            unordered_set<int> st;
            int cnt = 0;
            for(int j=i; j<n; j++){
                st.insert(nums[j]);
                cnt++;
                if(cnt==k && st.size()==k){
                    int sum = 0;
                    for(auto x : st){
                        sum+=x;
                    }
                    mxsum = max(sum, mxsum);
                }
            }
        }

        return mxsum;

    }
};

optimal
sliding window
class Solution {
public:
    long long maximumSubarraySum(vector<int>& nums, int k) {
        int n = nums.size();
        long long maxsum = 0; // Store the maximum sum
        long long currsum = 0; // Running sum of the current window
        unordered_map<int, int> freq; // Frequency map to track duplicates
        int i = 0;

        for (int j = 0; j < n; j++) {
            // Add the current element to the running sum and update its frequency
            currsum += nums[j];
            freq[nums[j]]++;

            // Shrink the window if it exceeds size `k`
            if (j - i + 1 > k) {
                currsum -= nums[i];
                freq[nums[i]]--;
                if (freq[nums[i]] == 0) {
                    freq.erase(nums[i]);
                }
                i++;
            }

            // Check if the window size is exactly `k` and contains unique elements
            if (j - i + 1 == k && freq.size() == k) {
                maxsum = max(maxsum, currsum);
            }
        }

        return maxsum;
    }
};
