1334. Find the City With the Smallest Number of Neighbors at a Threshold Distance

class Solution {
public:
 
int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        vector<pair<int,int>> adj[n];
        for(auto it:edges)
        {
            adj[it[0]].push_back({it[1],it[2]});
            adj[it[1]].push_back({it[0],it[2]});
        }
        
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        
        int cityno,mincitycount=1e9;
        
        for(int i=0;i<n;i++)
        {
            vector<int> dist(n,1e9);
            pq.push({0,i});
            dist[i]=0;
            while(!pq.empty())
            {
                int distance=pq.top().first;
                int node=pq.top().second;
                pq.pop();
                for(auto it:adj[node])
                {
                    int adjNode=it.first;
                    int adjWeight=it.second;
                    if(distance + adjWeight < dist[adjNode])
                    {
                        dist[adjNode] = distance + adjWeight;
                        pq.push({dist[adjNode],adjNode});
                    }
                }
            }
            int count=0;
            for(int j=0;j<n;j++)
            {
                if(dist[j]<=distanceThreshold)
                    count++;
            }
            if(count<=mincitycount)
            {
                mincitycount=count;
                cityno = i;
            }
        }
        return cityno;
    }
};


2970. Count the Number of Incremovable Subarrays I
class Solution {
public:
    bool check(vector<int> tmp){
        for(int i=1;i<tmp.size();i++){
            if(tmp[i] <= tmp[i-1]) return false;
        }
        return true;
    }
    int incremovableSubarrayCount(vector<int>& nums) {
        int n = nums.size();
        int res = 0;
        for(int i=0;i<n;i++){
            for(int j=i;j<n;j++){
                vector<int> tmp;
                //deleting subarrays
                for(int k=0;k<i;k++){
                    tmp.push_back(nums[k]);
                }
                for(int k=j+1;k<n;k++){
                    tmp.push_back(nums[k]);
                }
                if(check(tmp)){
                    res++;
                }
            }
        }
        return res;
    }
};

2002. Maximum Product of the Length of Two Palindromic Subsequences
class Solution {
    long  ans = 0;

    bool isPal(string &s)
    {
        int start=0, end = s.length()-1;
        while(start < end)
        {
            if(s[start] != s[end]) return false;
            start++; end--;
        }
        return true;
    }
        void helper(string &s,int idx,string &s1,string &s2){
            if(isPal(s1) && isPal(s2)){
                long temp= (int) s1.length() * s2.length();
                ans= max(ans, temp);     
           }
            for(int i=idx;i<s.size();i++){
                s1.push_back(s[i]);
                helper(s,i+1,s1,s2);
                s1.pop_back();

                s2.push_back(s[i]);
                helper(s,i+1,s1,s2);
                s2.pop_back();
            }
           return;
        }

public:
    int maxProduct(string s) {
        string s1="";
        string s2="";
        helper(s,0,s1,s2);
        return ans;
    }
};


