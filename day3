Bulls and Cows
class Solution {
public:
    string getHint(string secret, string guess) {
        unordered_map<char, int> mp; // Use char as key because we are dealing with characters

        // Count frequency of each character in the secret
        for (char ch : secret) {
            mp[ch]++;
        }

        int bull = 0;  
        int cow = 0; 

        // First pass: Count bulls and reduce their frequency in the map
        for (int i = 0; i < secret.size(); i++) {
            if (secret[i] == guess[i]) {
                bull++;
                mp[guess[i]]--;
                if (mp[guess[i]] == 0) {
                    mp.erase(guess[i]); 
                }
            }
        }

        // Second pass: Count cows
        for (int i = 0; i < guess.size(); i++) {
            if (secret[i] != guess[i] && mp.find(guess[i]) != mp.end()) {
                cow++;
                mp[guess[i]]--;
                if (mp[guess[i]] == 0) {
                    mp.erase(guess[i]); 
                }
            }
        }
 
        return to_string(bull) + 'A' + to_string(cow) + 'B';
    }
};


Count Number of Nice Subarrays

class Solution {

public:
   int find(vector<int>& nums, int goal){
         int l=0,r=0,cnt=0,sum=0;

          while(r<nums.size()){

             sum+=nums[r]%2;

             while(sum > goal && l<=r){
                sum = sum-(nums[l] %2);
                l++;
             }

             cnt = cnt + (r-l+1);
             r++;

          }
        return cnt;
   }

public:
    int numberOfSubarrays(vector<int>& nums, int k) {
        int ans = find(nums,k) - find(nums,k-1);
     return ans;
    }
};

Repeated DNA Sequences
class Solution {
public:
    vector<string> findRepeatedDnaSequences(string s) {
        
        int n = s.size();

        unordered_map<string, int> mp;

        for(int i=0; i<=n-10; i++){
           string str = s.substr(i,10);
           mp[str]++;
        }

        vector<string> ans;

        for(auto x : mp){
            if(x.second > 1){
                ans.push_back(x.first);
            }
        }

        return ans;

    }
};
